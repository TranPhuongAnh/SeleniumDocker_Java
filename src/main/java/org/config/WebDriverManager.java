package org.config;

import org.openqa.selenium.Capabilities;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.safari.SafariDriver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;

public class WebDriverManager {
    //    private static final String CHROME_DRIVER = "webdriver.chrome.driver"; //C·∫•u h√¨nh bi·∫øn tr·ªè ƒë·∫øn file webDriver c·ª©ng, selenium v4 tr·ªü ƒëi k c·∫ßn webDriver c·ª©ng
    private static final WebDriverManager webDriverManager = new WebDriverManager();
    public static CommonMethod commonMethod;
    private static WebDriver driver;
    private static EnvironmentType environmentType;
    private static DriverType driverType;
    private static OptionsBrowserManager options_manager = new OptionsBrowserManager();


    //H√†m s·ª≠ d·ª•ng ƒë∆∞·ª£c t·∫•t c·∫£ h√†m c·ªßa class WebDriverManager
    public static WebDriverManager getInstance() {
        return webDriverManager;
    }

    //H√†m ch·ªù theo th·ªùi gian trong file config
    public void ImplicitlyWait_Config() {
        long time = FileReaderManager.getInstance().getConfigReader().getImplicitlyWait();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(time));
    }

    //H√†m ƒë·∫∑t bi·∫øn cho gi√° tr·ªã c·∫•u h√¨nh t·ª´ file config
    public WebDriverManager() {
        driverType = FileReaderManager.getInstance().getConfigReader().getBrowser();
        environmentType = FileReaderManager.getInstance().getConfigReader().getEnvironment();
    }

    // H√†m getDriver() kh·ªüi t·∫°o diver
    protected WebDriver getDriver() {
        if (driver == null) {
            driver = createDriver();
        }
        return driver;
    }

    // H√†m createDriver() x√°c ƒë·ªãnh m√¥i tr∆∞·ªùng cho webDriver
    private WebDriver createDriver() {
        switch (environmentType) {
            case LOCAL:
                driver = createLocalDriver();
                break;
            case DOCKER:
                driver = createDockerDriver();
                break;
        }
        return driver;
    }

    // H√†m connect_to_grid_docker() tr·∫£ v·ªÅ ƒë·ªãa ch·ªâ c·ªßa Selenium Grid Docker
    private URL connect_to_grid_docker() {
        URL url = null;
        String hub_host = System.getenv().getOrDefault("HUB_HOST", "localhost");
        String grid_url = "http://" + hub_host + ":4444/wd/hub";

        boolean status = isGridAvailable(hub_host);
        System.out.println("K·∫øt n·ªëi t·ªõi grid docker: " + status);

        // 1. Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Grid
        if (!isGridAvailable(hub_host)) {
            return null;
        } else {
            try {
                System.out.println("ƒêang k·∫øt n·ªëi t·ªõi Selenium Grid Docker t·∫°i: " + grid_url + "...");
                url = new URL(grid_url);
                return url;

            } catch (MalformedURLException e) {
                System.out.println("URL c·ªßa Selenium Grid kh√¥ng h·ª£p l·ªá: " + e.getMessage());
                return null;
            }
        }
    }

    // H√†m isGridAvailable() ki·ªÉm tra k·∫øt n·ªëi Grid c√≥ s·∫µn kh√¥ng?
    private boolean isGridAvailable(String hub_host) {
        try {
            URL url = new URL("http://" + hub_host + ":4444/status");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(3000); // Th·ªùi gian ch·ªù k·∫øt n·ªëi t·ªëi ƒëa l√† 3 gi√¢y
            connection.connect();

            int code = connection.getResponseCode();
            if (code != 200){
                return false;
            }

            // ƒê·ªçc n·ªôi dung Json tr·∫£ v·ªÅ
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            String body = response.toString();

            if (body.contains("\"ready\":true")){
                return true;
            } else return false;

        } catch (Exception e){
            return false;
        }
    }

    // H√†m createDockerDriver() x√°c ƒë·ªãnh m√¥i tr∆∞·ªùng browser v√† tr·∫£ v·ªÅ webDriver ph√π h·ª£p
    private WebDriver createDockerDriver() {
        URL grid_url = connect_to_grid_docker(); // K·∫øt n·ªëi t·ªõi Selenium Grid Docker

        // N·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c t·ªõi Grid Docker th√¨ s·∫Ω ch·∫°y tr√™n m√¥i tr∆∞·ªùng LOCAL
        if (grid_url == null) {
            System.out.println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Selenium Grid Docker!");
            System.out.println("üëâ H√£y ch·∫Øc ch·∫Øn Docker v√† selenium-hub ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông!");
            System.out.println("...... S·ª≠ d·ª•ng local ƒë·ªÉ ti·∫øp t·ª•c test! ......");
            return createLocalDriver();
        } else {
            switch (driverType) {
                case CHROME:
                    driver = new RemoteWebDriver(grid_url, options_manager.chrome_options());
                    break;
                case FIREFOX:
                    driver = new RemoteWebDriver(grid_url, options_manager.firefox_options());
                    break;
                case EDGE:
                    driver = new RemoteWebDriver(grid_url, options_manager.edge_options());
                    break;
                case SAFARI:
                    System.out.println("Kh√¥ng h·ªó tr·ª£ Safari tr√™n Docker.");
                    System.out.println("S·ª≠ d·ª•ng tr√¨nh duy·ªát Chrome thay v√¨ Safari.");
                    driver = new RemoteWebDriver(grid_url, options_manager.chrome_options());
                    break;

            }
            driver.manage().window().maximize();

            ImplicitlyWait_Config();
            return driver;
        }
    }

    //H√†m createLocalDriver() x√°c ƒë·ªãnh webDriver ƒëang d√πng t·ª´ file config c·ªßa m√¥i tr∆∞·ªùng LOCAL
    private WebDriver createLocalDriver() {
        switch (driverType) {
            case CHROME:
                //Ch·ªâ c·∫•u h√¨nh khi selenium version < 4, v·ªõi selenium v4 tr·ªü ƒëi th√¨ k c·∫ßn b·∫£n c·ª©ng
//                System.setProperty(CHROME_DRIVER, System.getProperty("user.dir") + FileReaderManager.getInstance().getConfigReader().getDriverPath());
                driver = new ChromeDriver(options_manager.chrome_options());
                break;
            case FIREFOX:
                driver = new FirefoxDriver(options_manager.firefox_options());
                break;
            case EDGE:
                driver = new EdgeDriver(options_manager.edge_options());
                break;
            case SAFARI:
                driver = new SafariDriver(options_manager.safari_options());
                break;
        }
        driver.manage().window().maximize();

        ImplicitlyWait_Config();
        return driver;
    }

    // H√†m ƒë√≥ng t·∫•t c·∫£ tab c·ªßa web browser
    public void CloseDriver() throws InterruptedException {
        try {
            driver.close();
            Thread.sleep(1000);
            driver.quit();
        } catch (Exception exp) {
            System.out.println(exp.getMessage());
//            System.out.println(exp.getCause());
//            exp.printStackTrace();
        }
    }
}

